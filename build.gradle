
plugins {
    id 'java'
    id 'application'
    id 'maven-publish'
}

group 'com.reportmill'
version '2023.01.02'

sourceSets.main.java.srcDirs = ['src']
sourceSets.main.resources.srcDirs = ['src']

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {

    // Jitpack makes builds from GitHub repos
    maven { url 'https://jitpack.io' }
}

dependencies {

    // If Local SnapKit project, use that, otherwise use latest GitHub repo
    if (findProject(':SnapKit') != null) { println 'Using local SnapKit project'
        implementation project(':SnapKit') }
    else { println 'Using latest SnapKit GitHub repo'
        implementation 'com.github.reportmill:SnapKit:master-SNAPSHOT'  }

    // If Local SnapPDF project, use that, otherwise use latest GitHub repo
    if (findProject(':SnapPDF') != null) { println 'Using local SnapPDF project'
        implementation project(':SnapPDF') }
    else { println 'Using latest SnapPDF GitHub repo'
        implementation 'com.github.reportmill:SnapPDF:master-SNAPSHOT'  }

    // For MacOS mappings
    implementation files('lib/eawt.jar')

    // For Excel generation
    implementation files('lib/poi-3.7.jar')

    // For spelling
    implementation files('lib/spell.jar')
}

publishing {

    publications {
        gpr(MavenPublication) {
            artifactId 'ReportMill'
            from(components.java)
        }
    }
}

/**
 * Build executable jar SnapChartsAll.jar.
 *
 * We could use the standard jar task just by using jar { ... } and deleting 'baseName' and 'with jar' lines.
 */
task buildExecJar(type: Jar) {
    manifest {
        attributes(
            'Main-Class': 'com.reportmill.app.App',
            'Application-Name': 'RMStudio15',
            'Permissions': 'all-permissions'
        )
    }
    archiveBaseName = 'RMStudio15'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude('**/org/**')
    exclude('**/rmtests/**')
    exclude('**/test/**')
    exclude('**/font_metrics.properties')
    with jar {
        processResources {
            finalizedBy ('buildInfo')
        }
    }
}

tasks.register('buildInfo') {
    doLast {
        exec {
            workingDir '.'
            executable "date"
            args "+%b-%d-%y %H:%M"
            standardOutput new FileOutputStream('build/resources/main/com/reportmill/BuildInfo.txt')
        }
    }
}
